<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc compact="yes"?>
<?rfc iprnotified="no" ?>
<?rfc sortrefs="yes"?>
<?rfc strict="yes"?>
<?rfc symrefs="yes"?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>

<rfc category="std" ipr="trust200902" docName="draft-blanchet-precis-framework-02" obsoletes="3454">

  <?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

  <front>
    <title abbrev="PRECIS Framework">PRECIS Framework: Handling Internationalized Strings in Protocols</title>

    <author initials="M." surname="Blanchet" fullname="Marc Blanchet">
      <organization>Viagenie</organization>
      <address>
        <postal>
          <street>2600 boul. Laurier, suite 625</street>
          <city>Quebec</city>
          <region>QC</region>
          <code>G1V 4W1</code>
          <country>Canada</country>
        </postal>
        <email>Marc.Blanchet@viagenie.ca</email>
        <uri>http://www.viagenie.ca</uri>
      </address>
    </author>

    <author initials="P." surname="Saint-Andre" fullname="Peter Saint-Andre">
      <organization>Cisco</organization>
      <address>
        <postal>
          <street>1899 Wyknoop Street, Suite 600</street>
          <city>Denver</city>
          <region>CO</region>
          <code>80202</code>
          <country>USA</country>
        </postal>
        <phone>+1-303-308-3282</phone>
        <email>psaintan@cisco.com</email>
      </address>
    </author>

    <date day="11" month="July" year="2011"/>

    <abstract>
      <t>Application protocols that make use of Unicode code points in protocol strings need to prepare such strings in order to perform comparison operations (e.g., for purposes of authentication or authorization).  In general, this problem has been labeled the "preparation and comparison of internationalized strings" or "PRECIS".  This document defines a framework that enables application protocols to prepare various classes of strings in a way that depends on the properties of Unicode code points.  Because this framework does not depend on large tables of Unicode code points as in stringprep (RFC 3454), it is more agile with regard to changes in the underlying Unicode database and thus provides improved flexibility to application protocols.  A specification that uses this framework either can directly use the base string classes defined in this document or can subclass the base string classes as needed.  This framework uses an approach similar to that of the revised internationalized domain names in applications (IDNA) technology (RFC 5890, RFC 5891, RFC 5892, RFC 5893, RFC 5894) and thus adheres to the high-level design goals described in RFC 4690, albeit for PRECIS technologies.  This document obsoletes RFC 3454.</t>
    </abstract>

  </front>

  <middle>

    <section title="Introduction" anchor='intro'>
      <t>A number of IETF application technologies use stringprep <xref target='RFC3454'/> as the basis for comparing protocol strings that contain Unicode characters or "code points" <xref target='UNICODE'/>.  Since the publication of <xref target='RFC3454'/> in 2002, the Internet community has gained much more experience with internationalization, some of it reflected in <xref target='RFC4690'/>.  In particular, the IETF's technology for internationalized domain names (IDNs) has changed significantly: IDNA2003 <xref target='RFC3490'/>, which was based on stringprep, has been superseded by IDNA2008 (<xref target='RFC5890'/>, <xref target='RFC5891'/>, <xref target='RFC5892'/>, <xref target='RFC5893'/>, <xref target='RFC5894'/>), which does not use stringprep.  This migration away from stringprep for internationalized domain names has prompted other "customers" of stringprep to consider new approaches to the preparation and comparison of internationalized strings ("PRECIS"), as described in <xref target='PROBLEM'/>.</t>
      <t>This document proposes a technical framework for a post-stringprep approach to the preparation and comparison of internationalized strings in application protocols.  The framework is based on several principles:</t>
      <t>
        <list style='numbers'>
          <t>Define a small set of base string classes appropriate for common application protocol constructs such as usernames, passwords, and free-form identifiers.<vspace blankLines='1'/></t>
          <t>Define each base string class in terms of Unicode code points and their properties, specifying whether each code point or character category is valid, disallowed, or unassigned.<vspace blankLines='1'/></t>
          <t>Enable application protocols to subclass the base string classes, mainly to disallow particular code points that are currently disallowed in the protocol (e.g., characters with special or reserved meaning, such as "@" and "/" when used as separators within identifiers).<vspace blankLines='1'/></t>
          <t>Leave various mapping operations (e.g., case preservation or lowercasing, Unicode normalization, right-to-left characters) as the responsibility of application protocols, as was done for IDNA2008 via <xref target='RFC5895'/>.</t>
        </list>
      </t>
      <t>It is expected that this framework will yield the following benefits:</t>
      <t>
        <list style="symbols">
          <t>Application protocols will be more version-agile with regard to the Unicode database.</t>
          <t>Implementers will be able to share code point tables and software code across application protocols, most likely by means of code libraries.</t>
          <t>End users will be able to acquire more accurate expectations about the code points that are acceptable in various contexts.  Given this more uniform set of string classes, it is also expected that copy/paste operations between software implementing different application protocols will be more predictable and coherent.</t>
        </list>
      </t>
      <t>Although this framework is similar to IDNA2008 and borrows some of the character categories defined in <xref target='RFC5892'/>, it defines additional string classes and character categories to meet the needs of common application protocols.</t>
    </section>

    <section title="Terminology" anchor="terms">
      <t>Many important terms used in this document are defined in <xref target='PROBLEM'/>, <xref target='I18N-TERMS'/>, <xref target='RFC5890'/>, and <xref target='UNICODE'/>.</t>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target='RFC2119'/>.</t>
    </section>

    <section title="String Classes" anchor='classes'>
      <t>IDNA2008 essentially defines a base string class of internationalized domain name, although it does not use the term "string class".  (This document does not redefine a string class for domain names, and application protocols are strongly encouraged to use IDNA2008 as the appropriate method to prepare domain names and hostnames.)</t>
      <t>We propose the following additional base string classes for use in application protocols:</t>
      <t>
        <list style='hanging'>
          <t hangText="NameClass:">a sequence of letters, numbers, and symbols that is used to identify or address a network entity such as a user, an account, a venue (e.g., a chatroom), an information source (e.g., a data feed), or a collection of data (e.g., a file).<vspace blankLines='1'/></t>
          <t hangText="SecretClass:">a sequence of letters, numbers, and symbols that is used as a secret for access to some resource on a network (e.g., a password or passphrase).<vspace blankLines='1'/></t>
          <t hangText="FreeClass:">a sequence of letters, numbers, symbols, spaces, and other code points that is used for more expressive purposes in an application protocol (e.g., a free-form identifier such as a human-friendly nickname in a chatroom).</t>
        </list>
      </t>
      <t>The following subsections discuss these string classes in more detail, with reference to the dimensions described in Section 3 of <xref target='PROBLEM'/>.</t>
      <t>Each string class is defined by the following behavioral rules:</t>
      <t>
        <list style='hanging'>
          <t hangText='Valid:'>defines which code points and character categories are treated as valid input to preparation of the string.<vspace blankLines='1'/></t>
          <t hangText='Disallowed:'>defines which code points and character categories are treated as disallowed during preparation of the string.<vspace blankLines='1'/></t>
          <t hangText='Unassigned:'>defines application behavior in the presence of code points that are unassigned, i.e. unknown for the version of Unicode the application is built upon.<vspace blankLines='1'/></t>
          <t hangText='Directionality:'>defines application behavior in the presence of code points that have directionality, in particular right-to-left code points as defined in the Unicode database (see <xref target='UAX9'/>).<vspace blankLines='1'/></t>
          <t hangText='Casemapping:'>defines if case mapping is used for this class, and how the mapping is done.<vspace blankLines='1'/></t>
          <t hangText='Normalization:'>defines which Unicode normalization form (D, KD, C, or KC) is to be applied (see <xref target='UAX15'/>).</t>
        </list>
      </t>
      <t>This document defines the valid, disallowed, and unassigned rules.  Application protocols that use the PRECIS string classes MUST define the directionality, casemapping, and normalization rules, as further described under <xref target='iana-usage'/>.</t>

      <section title="NameClass" anchor="classes-name">
        <t>Most application technologies need a special class of strings that can be used to refer to, include, or communicate things like usernames, chatroom names, file names, and data feed names.  We group such things into a bucket called "NameClass" having the following features.</t>
        <section title='Valid' anchor='classes-name-valid'>
          <t>
            <list style='symbols'>
              <t>Letters and numbers, i.e., the LetterDigits ("A") category first defined in <xref target='RFC5892'/> and listed here under <xref target='A'/>.</t>
              <t>Code points in the range U+0021 through U+007E, i.e., the ASCII7 ("K") rule defined under <xref target='K'/>.  These code points are valid even if they would otherwise be disallowed according to the property-based rules specified in the next section.</t>
            </list>
          </t>
        </section>
        <section title='Disallowed' anchor='classes-name-disallowed'>
          <t>
            <list style='symbols'>
              <t>Control characters, i.e., the Controls ("L") category defined under <xref target='L'/>.</t>
              <t>Space characters, i.e., the Spaces ("N") category defined under <xref target='N'/>.</t>
              <t>Symbol characters, i.e., the Symbols ("O") category defined under <xref target='O'/>.</t>
              <t>Punctuation characters, i.e., the Punctuation ("P") category defined under <xref target='P'/>.</t>
              <t>Any character that has a compatibility equivalent, i.e., the HasCompat ("Q") category defined under <xref target='Q'/>.  These code points are disallowed even if they would otherwise be valid according to the property-based rules specified in the previous section.</t>
            </list>
          </t>
        </section>
        <section title='Unassigned' anchor='classes-name-unassigned'>
          <t>Any code points that are not yet assigned in the Unicode character set shall be considered Unassigned for purposes of the NameClass.</t>
        </section>
        <section title='Directionality' anchor='classes-name-directionality'>
          <t>MUST be defined by each application protocol that uses or subclasses the NameClass.</t>
        </section>
        <section title='Case Mapping' anchor='classes-name-mapping'>
          <t>MUST be defined by each application protocol that uses or subclasses the NameClass.</t>
        </section>
        <section title='Normalization' anchor='classes-name-normalization'>
          <t>MUST be defined by each application protocol that uses or subclasses the NameClass.</t>
          <t>However, in accordance with <xref target='RFC5198'/>, normalization form C (NFC) is RECOMMENDED.</t>
        </section>
      </section>

      <section title="SecretClass" anchor="classes-secret">
        <t>Many application technologies need a special class of strings that can be used to communicate secrets of the kind that are typically used as passwords or passphrases.  We group such things into a bucket called "SecretClass" having the following features.</t>
        <t>NOTE: Some application protocols use passwords and passphrases directly, whereas others reuse technologies that process passwords (e.g., the Simple Authentication and Security Layer <xref target='RFC4422'/>).  Moreover, passwords are often carried by a sequence of protocols with backends such as RADIUS or LDAP.  Developers of application protocols are encouraged to look into reusing these profiles instead of defining new ones, so that end-user expectations about passwords are consistent no matter which application protocol is used.</t>
        <section title='Valid' anchor='classes-secret-valid'>
          <t>
            <list style='symbols'>
              <t>Letters and numbers, i.e., the LetterDigits ("A") category first defined in <xref target='RFC5892'/> and listed here under <xref target='A'/>.</t>
              <t>Code points in the range U+0021 through U+007E, i.e., the ASCII7 ("K") rule defined under <xref target='K'/>.  These code points are valid even if they would otherwise be disallowed according to the property-based rules specified in the next section.</t>
              <t>Any character that has a compatibility equivalent, i.e., the HasCompat ("Q") category defined under <xref target='Q'/>.</t>
            </list>
          </t>
        </section>
        <section title='Disallowed' anchor='classes-secret-disallowed'>
          <t>
            <list style='symbols'>
              <t>Control characters, i.e., the Controls ("L") category defined under <xref target='L'/>.</t>
              <t>Space characters, i.e., the Spaces ("N") category defined under <xref target='N'/>.</t>
              <t>Symbol characters, i.e., the Symbols ("O") category defined under <xref target='O'/>.</t>
              <t>Punctuation characters, i.e., the Punctuation ("P") category defined under <xref target='P'/>.</t>
            </list>
          </t>
          <t>### OPEN ISSUE: Why not allow spaces, symbols, and punctuation characters in SecretClass? ###</t>
        </section>
        <section title='Unassigned' anchor='classes-secret-unassigned'>
          <t>Any code points that are not yet assigned in the Unicode character set shall be considered Unassigned for purposes of the SecretClass.</t>
        </section>
        <section title='Directionality' anchor='classes-secret-directionality'>
          <t>MUST be defined by each application protocol that uses or subclasses the SecretClass.</t>
        </section>
        <section title='Case Mapping' anchor='classes-secret-mapping'>
          <t>MUST be defined by each application protocol that uses or subclasses the SecretClass.</t>
          <t>However, in order to maximize the entropy of passwords and passphrases, it is NOT RECOMMENDED for application protocols to map uppercase and titlecase code points to their lowercase equivalents; instead, it is RECOMMENDED to preserve the case of all code points contained in the SecretClass.</t>
        </section>
        <section title='Normalization' anchor='classes-secret-normalization'>
          <t>MUST be defined by each application protocol that uses or subclasses the SecretClass.</t>
          <t>However, in accordance with <xref target='RFC5198'/>, normalization form C (NFC) is RECOMMENDED.</t>
        </section>
      </section>

      <section title="FreeClass" anchor="classes-free">
        <t>Some application technologies need a special class of strings that can be used in a free-form way (e.g., a nickname in a chatroom).  We group such things into a bucket called "FreeClass" having the following features.</t>
        <section title='Valid' anchor='classes-free-valid'>
          <t>
            <list style='symbols'>
              <t>Letters and numbers, i.e., the LetterDigits ("A") category first defined in <xref target='RFC5892'/> and listed here under <xref target='A'/>.</t>
              <t>Code points in the range U+0021 through U+007E, i.e., the ASCII7 ("K") rule defined under <xref target='K'/>.</t>
              <t>Any character that has a compatibility equivalent, i.e., the HasCompat ("Q") category defined under <xref target='Q'/>.</t>
              <t>Space characters, i.e., the Spaces ("N") category defined under <xref target='N'/>.</t>
              <t>Symbol characters, i.e., the Symbols ("O") category defined under <xref target='O'/>.</t>
              <t>Punctuation characters, i.e., the Punctuation ("P") category defined under <xref target='P'/>.</t>
            </list>
          </t>
        </section>
        <section title='Disallowed' anchor='classes-free-disallowed'>
          <t>
            <list style='symbols'>
              <t>Control characters, i.e., the Controls ("L") category defined under <xref target='L'/>.</t>
            </list>
          </t>
        </section>
        <section title='Unassigned' anchor='classes-free-unassigned'>
          <t>Any code points that are not yet assigned in the Unicode character set shall be considered Unassigned for purposes of the FreeClass.</t>
        </section>
        <section title='Directionality' anchor='classes-free-directionality'>
          <t>MUST be defined by each application protocol that uses or subclasses the FreeClass.</t>
        </section>
        <section title='Case Mapping' anchor='classes-free-mapping'>
          <t>MUST be defined by each application protocol that uses or subclasses the FreeClass.</t>
        </section>
        <section title='Normalization' anchor='classes-free-normalization'>
          <t>MUST be defined by each application protocol that uses or subclasses the FreeClass.</t>
          <t>However, in accordance with <xref target='RFC5198'/>, normalization form C (NFC) is RECOMMENDED.</t>
        </section>
      </section>
    </section>

    <section title="Use of PRECIS String Classes" anchor="use">
      <section title="Principles" anchor="use-principles">
        <t>This document defines the valid, disallowed, and unassigned rules.  Application protocols that use the PRECIS string classes MUST define the directionality, casemapping, and normalization rules.  Such definitions MUST at a minimum specify the following:</t>
        <t>
          <list style='hanging'>
            <t hangText='Directionality:'>Whether any instance of the class that contains a right-to-left code point is to be considered a right-to-left string, or whether a more complex rule is to be applied (e.g., the "Bidi Rule" from <xref target='RFC5893'/>).<vspace blankLines='1'/></t>
            <t hangText='Casemapping:'>Whether uppercase and titlecase code points are to be (a) preserved or (b) mapped to lowercase.<vspace blankLines='1'/></t>
            <t hangText='Normalization:'>Which Unicode normalization form (D, KD, C, or KC) is to be applied (see <xref target='UAX15'/> for background information); in accordance with <xref target='RFC5198'/>, NFC is RECOMMENDED.</t>
          </list>
        </t>
      </section>
      <section title="Subclassing" anchor="use-subclassing">
        <t>Application protocols are allowed to subclass the base string classes specified in this document.  As the word "subclass" implies, a subclass MUST NOT add as valid any code points or character categories that are disallowed by the base string class.  However, a subclass MAY do either of the following:</t>
        <t>
          <list style='numbers'>
            <t>Exclude specific code points that are included in the base string class.</t>
            <t>Exclude characters matching certain Unicode properties (e.g., math symbols) that are included in the base string class.</t>
          </list>
        </t>
      </section>
      <section title="Registration" anchor="use-registration">
        <t>Application protocols that use the PRECIS string classes MUST register with the IANA as described under <xref target='iana-usage'/>.  This is especially important for protocols that subclass the PRECIS string classes.</t>
      </section>
    </section>

    <section title="Code Point Properties">
      <t>In order to implement the string classes described above, this document does the following:</t>
      <t>
        <list style='numbers'>
          <t>Reviews and classifies the collections of code points in the Unicode character set by examining various code point properties.<vspace blankLines='1'/></t>
          <t>Defines an algorithm for determining a derived property value, which can vary depending on the string class being used by the relevant application protocol.</t>
         </list>
       </t>
      <t>This document is not intended to specify precisely how derived property values are to be applied in protocol strings.  That information should be defined in the protocol specification that uses or subclasses a base string class from this document.</t>
      <t>The value of the property is to be interpreted as follows.</t> 
      <t>
        <list style="hanging">
          <t hangText='PROTOCOL VALID'>Those code points that are allowed to be used in any PRECIS string class (NameClass, SecretClass, and FreeClass).  Code points with this property value are permitted for general use in any string class.  The abbreviated term PVALID is used to refer to this value in the rest of this document.<vspace blankLines='1'/></t>
          <t hangText='SPECIFIC CLASS PROTOCOL VALID'>Those code points that are allowed to be used in specific string classes. Code points with this property value are permitted for use in specific string classes.  In the rest of this document, the abbreviated term *_PVALID is used, where * = (NAMECLASS | SECRETCLASS | FREECLASS).<vspace blankLines='1'/></t>
          <t hangText='CONTEXTUAL RULE REQUIRED'>Some characteristics of the character, such as it being invisible in certain contexts or problematic in others, require that it not be used in labels unless specific other characters or properties are present.  The abbreviated term CONTEXT is used to refer to this value in the rest of this document.  There are two subdivisions of CONTEXTUAL RULE REQUIRED, the first for Join_controls (called CONTEXTJ) and the second for other characters (called CONTEXTO).<vspace blankLines='1'/></t>
          <t hangText='DISALLOWED'>Those that must not be included in any string class.  Code points with this property value are not permitted in any string class.<vspace blankLines='1'/></t>
          <t hangText='SPECIFIC CLASS DISALLOWED'>Those that are not to be included in a specific string class.  Code points with this property value are not permitted in one of the string classes but might be permitted in others.  In the rest of this document, the abbreviated term *_DISALLOWED is used, where * = (NAMECLASS | SECRETCLASS | FREECLASS).<vspace blankLines='1'/></t>
          <t hangText='UNASSIGNED'>Those code points that are not designated (i.e. are unassigned) in the Unicode Standard.</t>
        </list>
      </t>
      <t>The mechanisms described here allow determination of the value of the property for future versions of Unicode (including characters added after Unicode 5.2 or 6.0 depending on the category, since some categories in this document are reused from IDNA2008).  Changes in Unicode properties that do not affect the outcome of this process do not affect this framework.  For example, a character can have its Unicode General_Category value <xref target='UNICODE'/> change from So to Sm, or from Lo to Ll, without affecting the algorithm results.  Moreover, even if such changes were to result, the <xref target="G">BackwardCompatible list</xref> can be adjusted to ensure the stability of the results.</t>
      <t>### OPEN ISSUE: How to handle a backward compatible list on the level of PRECIS string classes or subclasses? ###</t>
      <t>Some code points need to be allowed in exceptional circumstances, but should be excluded in all other cases; these rules are also described in other documents.  The most notable of these are the Join Control characters, U+200D ZERO WIDTH JOINER and U+200C ZERO WIDTH NON-JOINER.  Both of them have the derived property value CONTEXTJ.  A character with the derived property value CONTEXTJ or CONTEXTO (CONTEXTUAL RULE REQUIRED) is not to be used unless an appropriate rule has been established and the context of the character is consistent with that rule.  It is invalid to generate a string containing these characters unless such a contextual rule is found and satisfied.  Please see Appendix A of <xref target='RFC5892'/> for more information.</t>
    </section>

    <section anchor="categories" title="Category Definitions Used to Calculate Derived Property Value">
      <t>The derived property obtains its value based on a two-step procedure:</t>
      <t>
        <list style='numbers'>
          <t>Characters are placed in one or more character categories based on either core properties defined by the Unicode Standard or by treating the code point as an exception and addressing the code point by its code point value.  These categories are not mutually exclusive.<vspace blankLines='1'/></t>
          <t>Set operations are used with these categories to determine the values for an string class specific property. These operations are specified under <xref target="PropertyCalculation" />.</t>
        </list>
      </t>
      <t>(NOTE: Unicode property names and property value names might have short abbreviations, such as gc for the General_Category property, and Ll for the Lowercase_Letter property value of the gc property.)</t>
      <t>In the following specification of character categories, the operation which returns the value of a particular Unicode character property for a code point is designated by using the formal name of that property (from PropertyAliases.txt) followed by '(cp)'.  For example, the value of the General_Category property for a code point is indicated by General_Category(cp).</t>
      <t>The first ten categories (A-J) shown below were previously defined for IDNA2008 and are copied directly from <xref target='RFC5892'/>.  Some of these categories are reused in PRECIS and some of them are not; however, the lettering of categories is retained to prevent overlap and to ease implementation of both IDNA2008 and PRECIS in a single software application.  The next seven categories (K-Q) are specific to PRECIS.</t>
        <section anchor="A" title="LetterDigits (A)">
          <t>NOTE: This category is defined in <xref target='RFC5892'/> and copied here for use in PRECIS.</t>
          <figure>
            <artwork>
A: General_Category(cp) is in {Ll, Lu, Lo, Nd, Lm, Mn, Mc}
            </artwork>
          </figure>
          <t>These rules identify characters commonly used in mnemonics and often informally described as "language characters".</t>
          <t>For more information, see section 4.5 of <xref target='UNICODE'/>.</t>
          <t>The categories used in this rule are:
            <list style="symbols">
              <t>Ll - Lowercase_Letter</t>
              <t>Lu - Uppercase_Letter</t>
              <t>Lo - Other_Letter</t>
              <t>Nd - Decimal_Number</t>
              <t>Lm - Modifier_Letter</t>
              <t>Mn - Nonspacing_Mark</t>
              <t>Mc - Spacing_Mark</t>
            </list>
          </t>
        </section>
        <section anchor="B" title="Unstable (B)">
          <t>NOTE: This category is defined in <xref target='RFC5892'/> but not used in PRECIS.</t>
          <!--
          <figure>
            <artwork>
B: toNFKC(toCaseFold(toNFKC(cp))) != cp
            </artwork>
          </figure>
          <t>This category is used to group the characters that are not stable under normalization form K (NFKC) and case folding.  In general, these code points are not suitable for use for IDN.
          <t>The toCaseFold() operation is defined in Section 3.13 of <xref target='UNICODE'/>.</t>
          <t>The toNFKC() operation returns the code point in normalization form KC.  For more information, see Section 5 of <xref target='UAX15'/>.</t>
          -->
        </section>
        <section anchor="C" title="IgnorableProperties (C)">
          <t>NOTE: This category is defined in <xref target='RFC5892'/> but not used in PRECIS.  See the "PrecisIgnorableProperties (M)" category below for a more inclusive category used in PRECIS identifiers.</t>
          <!--
          <figure>
            <artwork>
C: Default_Ignorable_Code_Point(cp) = True or
   White_Space(cp) = True or
   Noncharacter_Code_Point(cp) = True
            </artwork>
          </figure>
          <t>This category is used to group code points that are not recommended for use in identifiers.</t>
          <t>The definition for Default_Ignorable_Code_Point can be found in <eref target="http://unicode.org/Public/UNIDATA/DerivedCoreProperties.txt">DerivedCoreProperties.txt</eref> and is at the time of Unicode 5.2:</t>
          <figure>
            <artwork>
  Other_Default_Ignorable_Code_Point 
+ Cf (Format characters)
+ Variation_Selector 
- White_Space 
- FFF9..FFFB (Annotation Characters) 
- 0600..0603, 06DD, 070F (exceptional Cf characters 
                          that should be visible)
            </artwork>
          </figure>
          -->
        </section>
        <section anchor="D" title="IgnorableBlocks (D)">
          <t>NOTE: This category is defined in <xref target='RFC5892'/> but not used in PRECIS.</t>
          <!--
          <figure>
            <artwork>
D: Block(cp) is in {Combining Diacritical Marks for Symbols,
                    Musical Symbols, Ancient Greek Musical 
                    Notation}
            </artwork>
          </figure>
          <t>This category is used to identifying code points that are not useful in mnemonics but may be useful for some string classes.</t>
          <t>The definition of blocks can be found in <eref target="http://unicode.org/Public/UNIDATA/Blocks.txt">Blocks.txt</eref>.</t>
          -->
        </section>
        <section anchor="E" title="LDH (E)">
          <t>NOTE: This category is defined in <xref target='RFC5892'/> but not used in PRECIS.  See the "ASCII7 (K)" category below for a more inclusive category used in PRECIS identifiers.</t>
          <!--
          <figure>
            <artwork>
E: cp is in {002D, 0030..0039, 0061..007A}
            </artwork>
          </figure>
          <t>This category is used in the second step to preserve the traditional "hostname" (LDH) characters ('-', 0-9 and a-z). In general, these code points are suitable for use for identifiers.</t>
          -->
        </section>
        <section anchor="F" title="Exceptions (F)">
          <t>NOTE: This category is defined in <xref target='RFC5892'/> and might be used in a future version of this specification.</t>
          <figure>
            <artwork>
F: cp is in {00B7, 00DF, 0375, 03C2, 05F3, 05F4, 0640, 0660,
             0661, 0662, 0663, 0664, 0665, 0666, 0667, 0668,
             0669, 06F0, 06F1, 06F2, 06F3, 06F4, 06F5, 06F6,
             06F7, 06F8, 06F9, 06FD, 06FE, 07FA, 0F0B, 3007,
             302E, 302F, 3031, 3032, 3033, 3034, 3035, 303B,
             30FB}
            </artwork>
          </figure>
          <t>This category explicitly lists code points for which the category cannot be assigned using only the core property values that exist in the Unicode standard.  The values are according to the table below:</t>
          <figure>
            <artwork>
PVALID -- Would otherwise have been DISALLOWED

00DF; PVALID     # LATIN SMALL LETTER SHARP S
03C2; PVALID     # GREEK SMALL LETTER FINAL SIGMA
06FD; PVALID     # ARABIC SIGN SINDHI AMPERSAND
06FE; PVALID     # ARABIC SIGN SINDHI POSTPOSITION MEN
0F0B; PVALID     # TIBETAN MARK INTERSYLLABIC TSHEG
3007; PVALID     # IDEOGRAPHIC NUMBER ZERO

CONTEXTO -- Would otherwise have been DISALLOWED

00B7; CONTEXTO   # MIDDLE DOT
0375; CONTEXTO   # GREEK LOWER NUMERAL SIGN (KERAIA)
05F3; CONTEXTO   # HEBREW PUNCTUATION GERESH
05F4; CONTEXTO   # HEBREW PUNCTUATION GERSHAYIM
30FB; CONTEXTO   # KATAKANA MIDDLE DOT

CONTEXTO -- Would otherwise have been PVALID

0660; CONTEXTO   # ARABIC-INDIC DIGIT ZERO
0661; CONTEXTO   # ARABIC-INDIC DIGIT ONE
0662; CONTEXTO   # ARABIC-INDIC DIGIT TWO
0663; CONTEXTO   # ARABIC-INDIC DIGIT THREE
0664; CONTEXTO   # ARABIC-INDIC DIGIT FOUR
0665; CONTEXTO   # ARABIC-INDIC DIGIT FIVE
0666; CONTEXTO   # ARABIC-INDIC DIGIT SIX
0667; CONTEXTO   # ARABIC-INDIC DIGIT SEVEN
0668; CONTEXTO   # ARABIC-INDIC DIGIT EIGHT
0669; CONTEXTO   # ARABIC-INDIC DIGIT NINE
06F0; CONTEXTO   # EXTENDED ARABIC-INDIC DIGIT ZERO
06F1; CONTEXTO   # EXTENDED ARABIC-INDIC DIGIT ONE
06F2; CONTEXTO   # EXTENDED ARABIC-INDIC DIGIT TWO
06F3; CONTEXTO   # EXTENDED ARABIC-INDIC DIGIT THREE
06F4; CONTEXTO   # EXTENDED ARABIC-INDIC DIGIT FOUR
06F5; CONTEXTO   # EXTENDED ARABIC-INDIC DIGIT FIVE
06F6; CONTEXTO   # EXTENDED ARABIC-INDIC DIGIT SIX
06F7; CONTEXTO   # EXTENDED ARABIC-INDIC DIGIT SEVEN
06F8; CONTEXTO   # EXTENDED ARABIC-INDIC DIGIT EIGHT
06F9; CONTEXTO   # EXTENDED ARABIC-INDIC DIGIT NINE

DISALLOWED -- Would otherwise have been PVALID

0640; DISALLOWED # ARABIC TATWEEL
07FA; DISALLOWED # NKO LAJANYALAN
302E; DISALLOWED # HANGUL SINGLE DOT TONE MARK
302F; DISALLOWED # HANGUL DOUBLE DOT TONE MARK
3031; DISALLOWED # VERTICAL KANA REPEAT MARK
3032; DISALLOWED # VERTICAL KANA REPEAT WITH VOICED SOUND MARK
3033; DISALLOWED # VERTICAL KANA REPEAT MARK UPPER HALF
3034; DISALLOWED # VERTICAL KANA REPEAT WITH VOICED SOUND MARK 
                   UPPER HA
3035; DISALLOWED # VERTICAL KANA REPEAT MARK LOWER HALF
303B; DISALLOWED # VERTICAL IDEOGRAPHIC ITERATION MARK
            </artwork>
          </figure>
        </section>
        <section anchor="G" title="BackwardCompatible (G)">
          <t>NOTE: This category is defined in <xref target='RFC5892'/> and copied here for use in PRECIS.</t>
          <figure>
            <artwork>
G: cp is in {}
            </artwork>
          </figure>
          <t>This category includes the code points for which property values in versions of Unicode after 5.2 have changed in such a way that the derived property value would no longer be PVALID or DISALLOWED.  If changes are made to future versions of Unicode so that code points might change property value from PVALID or DISALLOWED, then this table can be updated and keep special exception values so that the property values for code points stay stable.</t>
        </section>
        <section anchor="H" title="JoinControl (H)">
          <t>NOTE: This category is defined in <xref target='RFC5892'/> and copied here for use in PRECIS.</t>
          <figure>
            <artwork>
H: Join_Control(cp) = True
            </artwork>
          </figure>
          <t>This category consists of Join Control characters (i.e., they are not in <xref target="A">LetterDigits</xref>) but are still required in strings under some circumstances.</t>
        </section>
        <section anchor="I" title="OldHangulJamo (I)">
          <t>NOTE: This category is defined in <xref target='RFC5892'/> and copied here for use in PRECIS.</t>
          <figure>
            <artwork>
I: Hangul_Syllable_Type(cp) is in {L, V, T}
            </artwork>
          </figure>
          <t>This category consists of all conjoining Hangul Jamo (Leading Jamo, Vowel Jamo, and Trailing Jamo).</t>
          <t>Elimination of conjoining Hangul Jamos from the set of PVALID characters results in restricting the set of Korean PVALID characters just to preformed, modern Hangul syllable characters. Old Hangul syllables, which must be spelled with sequences of conjoining Hangul Jamos, are not PVALID for string classes.</t>
        </section>
        <section anchor="J" title="Unassigned (J)">
          <t>NOTE: This category is defined in <xref target='RFC5892'/> and copied here for use in PRECIS.</t>
          <figure>
            <artwork>
J: General_Category(cp) is in {Cn} and
   Noncharacter_Code_Point(cp) = False
            </artwork>
          </figure>
          <t>This category consists of code points in the Unicode character set that are not (yet) assigned. It should be noted that Unicode distinguishes between 'unassigned code points' and 'unassigned characters'. The unassigned code points are all but (Cn - Noncharacters), while the unassigned *characters* are all but (Cn + Cs).</t>
        </section>
        <section anchor="K" title="ASCII7 (K)">
          <t>This category exempts most "ASCII7" characters from other rules that might be applied during PRECIS processing, on the assumption that these code points are in such wide use that disallowing them would be counter-productive.</t>
          <figure>
            <artwork>
K: cp is in {0021..007E}
            </artwork>
          </figure>
        </section>
        <section anchor="L" title="Controls (L)">
          <figure>
            <artwork>
L: Control(cp) = True
            </artwork>
          </figure>
        </section>
        <section anchor="M" title="PrecisIgnorableProperties (M)">
          <t>This category is used to group code points that are not recommended for use in PRECIS string classes.</t>
          <figure>
            <artwork>
M: Default_Ignorable_Code_Point(cp) = True or
   Noncharacter_Code_Point(cp) = True
            </artwork>
          </figure>
          <t>The definition for Default_Ignorable_Code_Point can be found in <eref target="http://unicode.org/Public/UNIDATA/DerivedCoreProperties.txt">DerivedCoreProperties.txt</eref> and at the time of Unicode 6.0 is as follows:</t>
          <figure>
            <artwork>
  Other_Default_Ignorable_Code_Point 
+ Cf (Format characters)
+ Variation_Selector 
- White_Space 
- FFF9..FFFB (Annotation Characters) 
- 0600..0603, 06DD, 070F (exceptional Cf characters 
                          that should be visible)
            </artwork>
          </figure>
        </section>
        <section anchor="N" title="Spaces (N)">
          <t>This category is used to group code points that are space characters.</t>
          <figure>
            <artwork>
N: General_Category(cp) is in {Zs}
            </artwork>
          </figure>
        </section>
        <section anchor="O" title="Symbols (O)">
          <t>This category is used to group code points that are symbols.</t>
          <figure>
            <artwork>
O: General_Category(cp) is in {Sc}
            </artwork>
          </figure>
        </section>
        <section anchor="P" title="Punctuation (P)">
          <t>This category is used to group code points that are punctuation marks.</t>
          <figure>
            <artwork>
P: General_Category(cp) is in {Pi}
            </artwork>
          </figure>
        </section>
        <section anchor="Q" title="HasCompat (Q)">
          <t>This category is used to group code points that have compatibility equivalents as explained in Chapter 2 and Chapter 3 of <xref target='UNICODE'/>.</t>
          <figure>
            <artwork>
Q: toNFKC(cp) != cp
            </artwork>
          </figure>
          <t>The toNFKC() operation returns the code point in normalization form KC.  For more information, see Section 5 of <xref target='UAX15'/>.</t>
        </section>
      </section>
      <section anchor="PropertyCalculation" title="Calculation of the Derived Property">
        <t>Possible values of the derived property are:</t>
        <t>
          <list style="symbols">
            <t>PVALID</t>
            <t>NAMECLASS_VALID</t>
            <t>SECRETCLASS_VALID</t>
            <t>FREECLASS_VALID</t>
            <t>CONTEXTJ</t>
            <t>CONTEXTO</t>
            <t>DISALLOWED</t>
            <t>NAMECLASS_DISALLOWED</t>
            <t>SECRETCLASS_DISALLOWED</t>
            <t>FREECLASS_DISALLOWED</t>
            <t>UNASSIGNED</t>
          </list>
        </t>
        <t>NOTE: In some instances, the value of the derived property calculated depends on the string class (e.g., if an identifier used in an application protocol is defined as using or subclassing the PRECIS NameClass, then a space character would be assigned to NAMECLASS_DISALLOWED).</t>
        <t>The algorithm to calculate the value of the derived property is as follows. (NOTE: If the name of a rule (such as Exception) is used, that implies the set of code points that the rule define, while the same name as a function call (such as Exception(cp)) imply the value cp has in the Exceptions table.)</t>
        <figure>
          <artwork>
If .cp. .in. Exceptions Then Exceptions(cp);
Else If .cp. .in. BackwardCompatible Then BackwardCompatible(cp);
Else If .cp. .in. Unassigned Then UNASSIGNED;
Else If .cp. .in. ASCII7 Then PVALID;
Else If .cp. .in. JoinControl Then CONTEXTJ;
Else If .cp. .in. PrecisIgnorableProperties Then DISALLOWED;
Else If .cp. .in. Controls Then DISALLOWED;
Else If .cp. .in. OldHangulJamo Then DISALLOWED;
Else If .cp. .in. LetterDigits Then PVALID;
Else If .cp. .in. Spaces Then NAMECLASS_DISALLOWED 
                  or SECRETCLASS_DISALLOWED 
                  or FREECLASS_VALID;
Else If .cp. .in. Symbols Then NAMECLASS_DISALLOWED 
                  or SECRETCLASS_DISALLOWED 
                  or FREECLASS_VALID;
Else If .cp. .in. Punctuation Then NAMECLASS_DISALLOWED 
                  or SECRETCLASS_DISALLOWED 
                  or FREECLASS_VALID;
Else If .cp. .in. HasCompat Then NAMECLASS_DISALLOWED 
                  or SECRETCLASS_VALID 
                  or FREECLASS_VALID;
Else DISALLOWED;
            </artwork>
          </figure>
      </section>

      <section anchor="codepointexplain" title="Code Points">
        <t>The Categories and Rules defined in <xref target="categories" /> and <xref target="PropertyCalculation" /> apply to all Unicode code points. The table in <xref target="codepoints" /> shows, for illustrative purposes, the consequences of the categories and classification rules, and the resulting property values.</t>
        <t>The list of code points that can be found in <xref target="codepoints" /> is non-normative.  Instead, the rules defined by <xref target="categories"/> and <xref target="PropertyCalculation"/> are normative, and any tables are derived from the rules.</t>
    </section>

    <section title="IANA Considerations" anchor='iana'>
      <section anchor="iana-derived" title="PRECIS Derived Property Value Registry">
        <t>IANA is requested to create a PRECIS-specific registry with the Derived Properties for the versions of Unicode that are released after (and including) version 6.0.  The derived property value is to be calculated in cooperation with a designated expert <xref target='RFC5226'/> according to the specifications in <xref target="categories" /> and <xref target="PropertyCalculation" />, and not by copying the non-normative table found in <xref target="codepoints" />.</t>
        <t>If during this process (creation of the table of derived property values) followed by a designated expert review, either non-backward compatible changes to the table of derived properties are discovered, or otherwise problems during the creation of the table arises, that is to be flagged to the IESG. Changes to the rules (as specified in <xref target="categories" /> and <xref target="PropertyCalculation" />) require IETF Review, as described in <xref target='RFC5226'/>.</t>
      </section>
      <section anchor="iana-context" title="PRECIS Contextual Rules Registry">
        <t>For characters that are defined in the IDNA derived property value registry as CONTEXTO or CONTEXTJ and that therefore require a contextual rule, IANA will create and maintain a list of approved contextual rules.  Additions or changes to these rules require IETF Review, as described in <xref target='RFC5226'/>.</t>
        <t>Appendix A (TBD) contains further discussion and a table from which that registry can be initialized.</t>
      </section>
      <section anchor="iana-usage" title="PRECIS Usage Registry">
        <t>IANA is requested to create a registry of application protocols that use the base string classes.  The registry shall include one entry for each use (e.g., if a protocol uses both the NameClass and the FreeClass then the specification for that protocol would submit two registrations).</t>
        <t>The registration template is as follows:</t>
        <t>
          <list style='hanging'>
            <t hangText='Base Class:'>[which base class is being used]</t>
            <t hangText='Subclassing:'>[whether the base class is being subclassed and, if so, where documentation of the subclassing can be found]</t>
            <t hangText='Directionality:'>[the behavioral rule for handling of right-to-left code points]</t>
            <t hangText='Casemapping:'>[the behavioral rule for handling of case]</t>
            <t hangText='Normalization:'>[which Unicode normalization form is applied]</t>
          </list>
        </t>
      </section>
    </section>

    <section title="Security Considerations" anchor='security'>
      <section title="General Issues" anchor='security-gen'>
        <t>The security of applications that use this framework can depend in part on the proper preparation and comparison of internationalized strings.  For example, such strings can be used to make authentication and authorization decisions; the security of an application could be compromised if an entity providing a given string is connected to the wrong account or online resource based on different interpretations of the string.</t>
        <t>Specifications for application protocols that use this framework MUST describe how internationalized strings are used in the protocol, including the security implications of any false positives and false negatives that might result from various comparison operations (for some helpful guidelines, refer to <xref target='IDENTIFIER'/>).</t>
        <t>(However, the security considerations in <xref target='RFC5890'/> and <xref target='UTR36'/> provide a good starting point.)</t>
      </section>
      <section title="Local Character Set Issues" anchor='security-charset'>
        <t>When systems use local character sets other than ASCII and Unicode, these specifications leave the problem of converting between the local character set and Unicode up to the application or local system.  If different applications (or different versions of one application) implement different rules for conversions among coded character sets, they could interpret the same name differently and contact different servers.  This problem is not solved by security protocols, such as Transport Layer Security (TLS) <xref target='RFC5246'/> and the Simple Authentication and Security Layer (SASL) <xref target='RFC4422'/>, that do not take local character sets into account.</t>
      </section>
      <section title="Visually Similar Characters" anchor='security-confusables'>
        <t>Some characters are visually similar and thus can cause confusion among humans.  Such characters are often called "confusable characters" or "confusables".</t>
        <t>The problem of confusable characters is not necessarily caused by the use of Unicode code points outside the US-ASCII range.  For example, in some presentations and to some individuals the string "ju1iet" (spelled with the Arabic numeral one as the third character) might appear to be the same as "juliet" (spelled with the lowercase version of the letter "L"), especially on casual visual inspection.  This phenomenon is sometimes called "typejacking".</t>
        <t>However, the problem is made more serious by introducing the full range of Unicode code points into protocol strings.  For example, the characters U+13DA U+13A2 U+13B5 U+13AC U+13A2 U+13AC U+13D2 from the Cherokee block look similar to the US-ASCII characters "STPETER" as they might look when presented in a "creative" font.</t>
        <t>In some examples of confusable characters, it is unlikely that the average human could tell the difference between the real string and the fake string.  (Indeed, there is no programmatic way to distinguish with full certainty which is the fake string and which is the real string; in some contexts, the string formed of Cherokee characters might be the real string and the string formed of US-ASCII characters might be the fake string.)  Because PRECIS-compliant strings can contain almost any properly encoded Unicode code point, it can be relatively easy to fake or mimic some strings in systems that use the PRECIS framework.  The fact that some strings are easily confused introduces security vulnerabilities of the kind that have also plagued the World Wide Web, specifically the phenomenon known as phishing.</t>
        <t>Despite the fact that some specific suggestions about identification and handling of confusable characters appear in the Unicode Security Considerations <xref target='UTR36'/>, it is also true (as noted in <xref target='RFC5890'/>) that "there are no comprehensive technical solutions to the problems of confusable characters".  Because it is impossible to map visually similar characters without a great deal of context (such as knowing the fonts used), the PRECIS framework does nothing to map similar-looking characters together, nor does it prohibit some characters because they look like others.</t>
        <t>However, specifications for application protocols that use this framework MUST describe how confusable characters can be used to compromise the security of systems that use the protocol in question, and any protocol-specific suggestions for overcoming those threats.  The following recommendations are appropriate:</t>
        <t>
          <list style='numbers'>
            <t>An application service SHOULD define a policy that specifies the scripts or blocks of characters that the service will allow to be registered (e.g., in an account name) or stored (e.g., in a file name).  Such a policy SHOULD be informed by the languages and scripts that are used to write registered account names; in particular, to reduce confusion, the service SHOULD forbid registration or storage of stings that contain characters from more than one script and to restrict registrations to characters drawn from a very small number of scripts (e.g., scripts that are well-understood by the administrators of the service, to improve manageability).<vspace blankLines='1'/></t>
            <t>User-oriented application software SHOULD define a policy that specifies how internationalized strings will be presented to a human user.  Because every human user of such software has a preferred language or a small set of preferred languages, the software SHOULD gather that information either explicitly from the user or implicitly via the operating system of the user's device.  Furthermore, because most languages are typically represented by a single script or a small set of scripts, and because and most scripts are typically contained in one or more blocks of characters, the software SHOULD warn the user when presenting a string that mixes characters from more than one script or block, or that uses characters outside the normal range of the user's preferred language(s).  (Such a recommendation is not intended to discourage communication across different communities of language users; instead, it recognizes the existence of such communities and encourages due caution when presenting unfamiliar scripts or characters to human users.)</t>
          </list>
        </t>
      </section>
    </section>

    <section title="Acknowledgements">
      <t>The authors would like to acknowledge the comments and contributions of the following people: David Black, Mark Davis, Alan DeKok, Martin Duerst, Patrik Faltstrom, Ted Hardie, Joe Hildebrand, Paul Hoffman, Jeffrey Hutzelman, Simon Josefsson, John Klensin, Alexey Melnikov, Pete Resnick, Andrew Sullivan, and Dave Thaler.</t>
      <t>Some algorithms and textual descriptions have been borrowed from <xref target='RFC5892'/>.  Some text regarding security has been borrowed from <xref target='RFC5890'/> and <xref target='XMPP-ADDR'/>.</t>
    </section>

<!--
    <section title="Contextual Rules Registry" anchor="RulesInit">
	   <t>
   As discussed in <xref target="IANAContext"/>, a
       registry of rules that define the contexts in which particular
       PROTOCOL-VALID characters, characters associated with a requirement for
       Contextual Information, are permitted. These rules are expressed as
       tests on the label in which the characters appear (all, or any part of,
       the label may be tested).
     </t>

     <t>
	The grammatical rules are expressed in pseudo code. The conventions used
      for that pseudo code are explained here.
 </t>
 <t>
   Each rule is constructed as a Boolean expression that evaluates to
   either True or False. A simple "True;" or "False;" rule sets the
   default result value for the rule set. Subsequent conditional rules
   that evaluate to True or False may re-set the result value.
 </t>
 <t>
   A special value "Undefined" is used to deal with any error conditions,
    such as an attempt to test a character before the start of a label or
      after the end of a label. If any term of a rule evaluates to Undefined,
      further evaluation of the rule immediately terminates, as the result
      value of the rule will itself be Undefined.
</t><t>
 <list style="hanging">
    <t><vspace/>
     cp represents the code point to be tested.
   </t>
    <t><vspace/> FirstChar is a special term which denotes the first code point in a string.  </t>
    <t><vspace/>
      LastChar is a special term which denotes the last code point in a string.  </t>
       <t><vspace/> .eq. represents the equality relation. 
    <list style="hanging">
     <t><vspace/> A .eq. B evaluates to True if A equals B. </t>
       </list></t>
       <t><vspace/> .is. represents checking position in a string. 
       <list style="hanging">
     <t><vspace/>
     A .is. B evaluates to True if A and B have same position in the same string.  </t>
       </list></t>
       <t><vspace/> .ne. represents the non-equality relation. 
       <list style="hanging">
     <t><vspace/> A .ne. B evaluates to True if A is not equal to B.</t>
       </list></t>
       <t><vspace/> .in. represents the set inclusion relation. 
       <list style="hanging">
    <t><vspace/> A .in. B evaluates to True if A is a member of the set B.  </t>
       </list>
       </t>
     </list>
</t>
 <t><vspace/>
		   A functional notation, Function_Name(cp), is used to express either
       string positions within a string, Boolean character property tests of a
       code point, or a regular expression match. When such function names
       refer to Boolean character property tests, the function names use the
       exact Unicode character property name for the property in question, and
       "cp" is evaluated as the Unicode value of the code point to be tested,
       rather than as its position in the string. When such function names
       refer to string positions within a string, "cp" is evaluated as its
       position in the string.
		 </t>
		 <t>
   RegExpMatch(X) takes as its parameter X a schematic regular expression
       consisting of a mix of Unicode character property values and literal
       Unicode code points.
		 </t>
		 <t>
		   Script(cp) returns the value of the Unicode Script property, as defined
       in Scripts.txt in the Unicode Character Database.
		 </t>
		 <t>
		   Canonical_Combining_Class(cp) returns the value of the Unicode
       Canonical_Combining_Class property, as defined in UnicodeData.txt in
       the Unicode Character Database.
	   </t>
		 <t>
		   Before(cp) returns the code point of the character immediately preceding
       cp in logical order in the string representing the string.
       Before(FirstChar) evaluates to Undefined.
		 </t>
		 <t>
		   After(cp) returns the code point of the character immediately following
       cp in logical order in the string representing the string.
       After(LastChar) evaluates to Undefined.
		 </t>
		 <t>
			 Note that "Before" and "After" do not refer to the visual display order
       of the character in a string, which may be reversed or otherwise
       modified by the bidirectional algorithm for strings including characters
       from scripts written right-to-left. Instead,
			 'Before' and 'After' refer to the network order of the character in
			 the string.
		 </t>
		 <t>
			 The clauses "Then True" and "Then False" imply exit from the
       pseudo-code routine with the corresponding result.
		 </t>
		 <t>
		   Repeated evaluation for all characters in a string makes use of the
       special construct:
		 <list style="hanging">
		   <t><vspace/>
			   For All Characters:
			 <list style="hanging">
			   <t>
				   Expression;
				 </t>
			 </list>
			 </t>
			 <t>
			   End For;
       </t>
		 </list>
                 </t>
		 <t>
		   This construct requires repeated evaluation of "Expression" for each
       code point in the string, starting from FirstChar and proceeding to
       LastChar.
		 </t>
     <t>
       The different fields in the rules are to be interpreted as follows:
	<list style="hanging">
	<t hangText="Code point: "><vspace/>
	The code point, or code points, that this rule is to be applied to.
          Normally, this implies that if any of the code points in a string is
          as defined, then the rules should be applied. If evaluated to True,
          the code point is ok as used; if evaluated to False, it is not o.k.
	</t>
	<t hangText="Overview: "><vspace/>
	A description of the goal with the rule, in plain English.
	</t>
	<t hangText="Lookup: "><vspace/>
		True if application of this rule is recommended at lookup
		time; False otherwise.
	</t>
	<t hangText="Rule Set: "><vspace/>
	The rule set itself, as described above.
	</t>
	</list> </t>

	   <section title="ZERO WIDTH NON-JOINER"><t>
		   <list style="hanging">
		     <t hangText="Code point: "><vspace/>U+200C</t>
		     <t hangText="Overview: "><vspace/>
		       This may occur in a formally cursive script (such as Arabic) in a
           context where it breaks a cursive connection as required for
           orthographic rules, as in the Persian language, for example. It
           also may occur in Indic scripts in a consonant conjunct context
           (immediately following a virama), to control required display of
           such conjuncts.
         </t>
     <t hangText="Lookup: "><vspace/>True</t>
     <t hangText="Rule Set: "/>
	 <t>False;</t>
	 <t>If Canonical_Combining_Class(Before(cp)) .eq. Virama Then True;</t>
	 <t>If RegExpMatch((Joining_Type:{L,D})(Joining_Type:T)*\u200C
           <list>
	   <t>(Joining_Type:T)*(Joining_Type:{R,D})) Then True;</t>
           </list>
 	 </t>
      </list></t>
		</section>

	  <section title="ZERO WIDTH JOINER">
		<t><list style="hanging">
		   <t hangText="Code point: "><vspace/>U+200D</t>
		   <t hangText="Overview: "><vspace/>
			     This may occur in Indic scripts in a consonant conjunct context
           (immediately following a virama), to control required display of
           such conjuncts.
			 </t>
		   <t hangText="Lookup: "><vspace/>True</t>
		   <t hangText="Rule Set: "/>
         <t>False;</t>
				 <t>If Canonical_Combining_Class(Before(cp)) .eq. Virama Then True;</t>
		</list></t>
	  </section>

	 <section title="MIDDLE DOT">
		<t><list style="hanging">
		   <t hangText="Code point: "><vspace/>U+00B7</t>
		   <t hangText="Overview: "><vspace/>Between 'l' (U+006C) characters
			  only, used to permit the Catalan character ela geminada
			  to be expressed
			 </t>
		   <t hangText="Lookup: "><vspace/>False</t>
		   <t hangText="Rule Set: "/>
		     <t>False;</t>
			   <t>If Before(cp) .eq. U+006C And
         <list>
			     <t>After(cp) .eq. U+006C Then True;</t>
		     </list></t>
		</list></t>
	</section>

	 <section title="GREEK LOWER NUMERAL SIGN (KERAIA)">
		<t><list style="hanging">
		   <t hangText="Code point: "><vspace/>U+0375</t>
		   <t hangText="Overview: "><vspace/>The script of the following character MUST be Greek.</t>
		   <t hangText="Lookup: "><vspace/>False</t>
		   <t hangText="Rule Set: "/>
		     <t>False;</t>
				 <t>If Script(After(cp)) .eq. Greek Then True;</t>
	  </list></t>
	 </section>

	<section title="HEBREW PUNCTUATION GERESH">
		<t><list style="hanging">
		  <t hangText="Code point: "><vspace/>U+05F3</t>
			<t hangText="Overview: "><vspace/>The script of the preceding
			   character MUST be Hebrew.</t>
			<t hangText="Lookup: "><vspace/>False</t>
			<t hangText="Rule Set: "/>
			  <t>False;</t>
				<t>If Script(Before(cp)) .eq. Hebrew Then True;</t>
    </list></t>
	</section>

	<section title="HEBREW PUNCTUATION GERSHAYIM">
	<t><list style="hanging">
			<t hangText="Code point: "><vspace/>U+05F4 </t>
			<t hangText="Overview: "><vspace/>
				The script of the preceding character MUST be Hebrew.
			</t> 
			<t hangText="Lookup: "><vspace/>False</t>
			<t hangText="Rule Set: "/>
			<t>False;</t>
			<t>If Script(Before(cp)) .eq. Hebrew Then True;</t>
		</list></t>
	</section>

	<section title="KATAKANA MIDDLE DOT">
	<t><list style="hanging">
			<t hangText="Code point: "><vspace/>U+30FB </t>
			<t hangText="Overview: "><vspace/>
				Note that the Script of Katakana Middle Dot is not any
				of "Hiragana", "Katakana" or "Han". The effect of
				this rule is to require at least one character in the label
				to be in one of those scripts.
			</t>
			<t hangText="Lookup: "><vspace/>False</t>
			<t hangText="Rule Set: "/>
				<t>False;</t>
				<t>For All Characters:
				<list>
					<t>If Script(cp) .in. {Hiragana, Katakana, Han} Then True;</t>
				</list></t>
				<t>End For;</t>
		</list></t>
	</section>

	<section title="ARABIC-INDIC DIGITS">
	<t>	<list style="hanging">
			<t hangText="Code point: "><vspace/>0660..0669</t>
			<t hangText="Overview: "><vspace/>
				Can not be mixed with Extended Arabic-Indic Digits.
			</t>
			<t hangText="Lookup: "><vspace/>False</t>
			<t hangText="Rule Set: "/>
				<t>True;</t>
				<t>For All Characters:
				<list>
					<t>If cp .in. 06F0..06F9 Then False;</t>
				</list></t>
				<t>End For;</t>
		</list>
    	</t>
	</section>

	<section title="EXTENDED ARABIC-INDIC DIGITS">
	<t>	<list style="hanging">
			<t hangText="Code point: "><vspace/>06F0..06F9</t>
			<t hangText="Overview: "><vspace/>
				Can not be mixed with Arabic-Indic Digits.
			</t>
			<t hangText="Lookup: "><vspace/>False</t>
			<t hangText="Rule Set: "/>
				<t>True;</t>
				<t>For All Characters:
				<list>
					<t>If cp .in. 0660..0669 Then False;</t>
				</list></t>
				<t>End For;</t>
		</list></t>
	</section>

  </section>

-->

    <section anchor="codepoints" title="Codepoints 0x0000 - 0x10FFFF">
      <t>To follow.</t>
      <!--
      <t>If one applies <xref target="PropertyCalculation">the rules</xref> to the code points 0x0000 to 0x10FFFF to Unicode 6.0, the result is as follows.</t>
      <t>NOTE: This list is non-normative, and only included for illustrative purposes.  Specifically, what is displayed in the third column is not the formal name of the code point (as defined in <xref target='UNICODE'/>).  There are differences, for example with regard to the code points that have the code point value as part of the name (example: CJK UNIFIED IDEOGRAPH-4E00) and the naming of Hangul syllables.  However, for many code points, what you see is the official name.</t>
      -->

      <section title="Codepoints in Unicode Character Database (UCD) format">
        <t>To follow.</t>
        <!--
        <figure><artwork>
0000..10FFFF; TBD! 
        </artwork></figure>
        -->
      </section>
    </section>
  </middle>

  <back>
    <references title="Normative References">

<reference anchor="RFC2119">
<front>
<title abbrev='RFC Key Words'>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='Scott Bradner'>
<organization>Harvard University</organization>
<address>
<postal>
<street>1350 Mass.  Ave.</street>
<street>Cambridge</street>
<street>MA 02138</street></postal>
<phone>- +1 617 495 3864</phone>
<email>sob@harvard.edu</email></address></author>
<date month='March' year='1997' />
<area>General</area>
<keyword>keyword</keyword>
<abstract>
<t>
   In many standards track documents several words are used to signify
   the requirements in the specification.  These words are often
   capitalized.  This document defines these words as they should be
   interpreted in IETF documents.  Authors who follow these guidelines
   should incorporate this phrase near the beginning of their document:

<list>
<t>
      The key words &quot;MUST&quot;, &quot;MUST NOT&quot;, &quot;REQUIRED&quot;, &quot;SHALL&quot;, &quot;SHALL
      NOT&quot;, &quot;SHOULD&quot;, &quot;SHOULD NOT&quot;, &quot;RECOMMENDED&quot;,  &quot;MAY&quot;, and
      &quot;OPTIONAL&quot; in this document are to be interpreted as described in
      RFC 2119.
</t></list></t>
<t>
   Note that the force of these words is modified by the requirement
   level of the document in which they are used.
</t></abstract></front>
<seriesInfo name='BCP' value='14' />
<seriesInfo name='RFC' value='2119' />
<format type='TXT' octets='4723' target='ftp://ftp.isi.edu/in-notes/rfc2119.txt' />
<format type='HTML' octets='14486' target='http://xml.resource.org/public/rfc/html/rfc2119.html' />
<format type='XML' octets='5661' target='http://xml.resource.org/public/rfc/xml/rfc2119.xml' />
</reference>

<reference anchor='RFC5198'>
<front>
<title>Unicode Format for Network Interchange</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin'>
<organization /></author>
<author initials='M.' surname='Padlipsky' fullname='M. Padlipsky'>
<organization /></author>
<date year='2008' month='March' />
<abstract>
<t>The Internet today is in need of a standardized form for the transmission of internationalized "text" information, paralleling the specifications for the use of ASCII that date from the early days of the ARPANET.  This document specifies that format, using UTF-8 with normalization and specific line-ending sequences. [STANDARDS-TRACK]</t></abstract></front>
<seriesInfo name='RFC' value='5198' />
<format type='TXT' octets='45708' target='http://www.rfc-editor.org/rfc/rfc5198.txt' />
</reference>

<reference anchor="UNICODE" target="http://www.unicode.org/versions/Unicode6.0.0/">
  <front>
    <title>The Unicode Standard, Version 6.0</title>
    <author>
      <organization>The Unicode Consortium</organization>
    </author>
    <date year="2010" />
  </front>
</reference>

    </references>
    <references title="Informative References">

<reference anchor='I18N-TERMS'>
<front>
<title>Terminology Used in Internationalization in the IETF</title>
<author initials='P' surname='Hoffman' fullname='Paul Hoffman'>
    <organization />
</author>
<author initials='J' surname='Klensin' fullname='John Klensin'>
    <organization />
</author>
<date month='July' day='9' year='2011' />
<abstract><t>This document provides a glossary of terms used in the IETF when discussing internationalization.  The purpose is to help frame discussions of internationalization in the various areas of the IETF and to help introduce the main concepts to IETF participants.</t></abstract>
</front>
<seriesInfo name='Internet-Draft' value='draft-hoffman-rfc3536bis-06' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-hoffman-rfc3536bis-06.txt' />
</reference>

<reference anchor='IDENTIFIER'>
<front>
<title>Issues in Identifier Comparison for Security Purposes</title>
<author initials='D' surname='Thaler' fullname='Dave Thaler'>
    <organization />
</author>
<date month='July' day='2' year='2011' />
<abstract><t>Identifiers such as hostnames, URIs/IRIs, and email addresses are often used in security contexts to identify security principals and resources.  In such contexts, an identifier supplied via some protocol is often compared against some policy to make security decisions such as whether the principal may access the resource, what level of authentication or encryption is required, etc.  If the parties involved in a security decision use different algorithms to compare identifiers, then failure scenarios ranging from denial of service to elevation of privilege can result.</t></abstract>
</front>
<seriesInfo name='Internet-Draft' value='draft-iab-identifier-comparison-00' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-iab-identifier-comparison-00.txt' />
</reference>

<reference anchor='PROBLEM'>
<front>
<title>Stringprep Revision Problem Statement</title>
<author initials='M' surname='Blanchet' fullname='Marc Blanchet'>
    <organization />
</author>
<author initials='A' surname='Sullivan' fullname='Andrew Sullivan'>
    <organization />
</author>
<date month='March' day='31' year='2011' />
<abstract><t>Using Unicode codepoints in protocol strings that expect comparison with other strings requires preparation of the string that contains the Unicode codepoints.  Internationalizing Domain Names in Applications (IDNA2003) defined and used Stringprep and Nameprep. Other protocols subsequently defined Stringprep profiles.  A new approach different from Stringprep and Nameprep is used for a revision of IDNA2003 (called IDNA2008).  Other Stringprep profiles need to be similarly updated or a replacement of Stringprep needs to be designed.  This document outlines the issues to be faced by those designing a Stringprep replacement.</t></abstract>
</front>
<seriesInfo name='Internet-Draft' value='draft-ietf-precis-problem-statement-02' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-precis-problem-statement-02.txt' />
</reference>

<reference anchor='RFC3454'>
<front>
<title>Preparation of Internationalized Strings ("stringprep")</title>
<author initials='P.' surname='Hoffman' fullname='P. Hoffman'>
<organization /></author>
<author initials='M.' surname='Blanchet' fullname='M. Blanchet'>
<organization /></author>
<date year='2002' month='December' />
<abstract>
<t>This document describes a framework for preparing Unicode text strings in order to increase the likelihood that string input and string comparison work in ways that make sense for typical users throughout the world.  The stringprep protocol is useful for protocol identifier values, company and personal names, internationalized domain names, and other text strings.  This document does not specify how protocols should prepare text strings.  Protocols must create profiles of stringprep in order to fully specify the processing options. [STANDARDS-TRACK]</t></abstract></front>
<seriesInfo name='RFC' value='3454' />
<format type='TXT' octets='138684' target='http://www.rfc-editor.org/rfc/rfc3454.txt' />
</reference>

<reference anchor='RFC3490'>
<front>
<title>Internationalizing Domain Names in Applications (IDNA)</title>
<author initials='P.' surname='Faltstrom' fullname='P. Faltstrom'>
<organization /></author>
<author initials='P.' surname='Hoffman' fullname='P. Hoffman'>
<organization /></author>
<author initials='A.' surname='Costello' fullname='A. Costello'>
<organization /></author>
<date year='2003' month='March' />
<abstract>
<t>Until now, there has been no standard method for domain names to use characters outside the ASCII repertoire.  This document defines internationalized domain names (IDNs) and a mechanism called Internationalizing Domain Names in Applications (IDNA) for handling them in a standard fashion.  IDNs use characters drawn from a large repertoire (Unicode), but IDNA allows the non-ASCII characters to be represented using only the ASCII characters already allowed in so-called host names today.  This backward-compatible representation is required in existing protocols like DNS, so that IDNs can be introduced with no changes to the existing infrastructure.  IDNA is only meant for processing domain names, not free text. [STANDARDS-TRACK]</t></abstract></front>
<seriesInfo name='RFC' value='3490' />
<format type='TXT' octets='51943' target='http://www.rfc-editor.org/rfc/rfc3490.txt' />
</reference>

<reference anchor='RFC4422'>
<front>
<title>Simple Authentication and Security Layer (SASL)</title>
<author initials='A.' surname='Melnikov' fullname='A. Melnikov'>
<organization /></author>
<author initials='K.' surname='Zeilenga' fullname='K. Zeilenga'>
<organization /></author>
<date year='2006' month='June' />
<abstract>
<t>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms. It provides a structured interface between protocols and mechanisms. The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms. The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.&lt;/t>&lt;t> This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection. In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.&lt;/t>&lt;t> This document obsoletes RFC 2222. [STANDARDS-TRACK]</t></abstract></front>
<seriesInfo name='RFC' value='4422' />
<format type='TXT' octets='73206' target='http://www.rfc-editor.org/rfc/rfc4422.txt' />
</reference>

<reference anchor='RFC4690'>
<front>
<title>Review and Recommendations for Internationalized Domain Names (IDNs)</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin'>
<organization /></author>
<author initials='P.' surname='Faltstrom' fullname='P. Faltstrom'>
<organization /></author>
<author initials='C.' surname='Karp' fullname='C. Karp'>
<organization /></author>
<author>
<organization>IAB</organization></author>
<date year='2006' month='September' />
<abstract>
<t>This note describes issues raised by the deployment and use of Internationalized Domain Names.  It describes problems both at the time of registration and for use of those names in the DNS.  It recommends that IETF should update the RFCs relating to IDNs and a framework to be followed in doing so, as well as summarizing and identifying some work that is required outside the IETF.  In particular, it proposes that some changes be investigated for the Internationalizing Domain Names in Applications (IDNA) standard and its supporting tables, based on experience gained since those standards were completed.  This memo provides information for the Internet community.</t></abstract></front>
<seriesInfo name='RFC' value='4690' />
<format type='TXT' octets='100929' target='http://www.rfc-editor.org/rfc/rfc4690.txt' />
</reference>

<reference anchor='RFC5226'>
<front>
<title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
<author initials='T.' surname='Narten' fullname='T. Narten'>
<organization /></author>
<author initials='H.' surname='Alvestrand' fullname='H. Alvestrand'>
<organization /></author>
<date year='2008' month='May' />
<abstract>
<t>Many protocols make use of identifiers consisting of constants and other well-known values. Even after a protocol has been defined and deployment has begun, new values may need to be assigned (e.g., for a new option type in DHCP, or a new encryption or authentication transform for IPsec). To ensure that such quantities have consistent values and interpretations across all implementations, their assignment must be administered by a central authority. For IETF protocols, that role is provided by the Internet Assigned Numbers Authority (IANA).&lt;/t>&lt;t> In order for IANA to manage a given namespace prudently, it needs guidelines describing the conditions under which new values can be assigned or when modifications to existing values can be made. If IANA is expected to play a role in the management of a namespace, IANA must be given clear and concise instructions describing that role. This document discusses issues that should be considered in formulating a policy for assigning values to a namespace and provides guidelines for authors on the specific text that must be included in documents that place demands on IANA.&lt;/t>&lt;t> This document obsoletes RFC 2434. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract></front>
<seriesInfo name='BCP' value='26' />
<seriesInfo name='RFC' value='5226' />
<format type='TXT' octets='66160' target='http://www.rfc-editor.org/rfc/rfc5226.txt' />
</reference>

<reference anchor='RFC5246'>
<front>
<title>The Transport Layer Security (TLS) Protocol Version 1.2</title>
<author initials='T.' surname='Dierks' fullname='T. Dierks'>
<organization /></author>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'>
<organization /></author>
<date year='2008' month='August' />
<abstract>
<t>This document specifies Version 1.2 of the Transport Layer Security (TLS) protocol.  The TLS protocol provides communications security over the Internet.  The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery. [STANDARDS-TRACK]</t></abstract></front>
<seriesInfo name='RFC' value='5246' />
<format type='TXT' octets='222395' target='http://www.rfc-editor.org/rfc/rfc5246.txt' />
</reference>

<reference anchor='RFC5890'>
<front>
<title>Internationalized Domain Names for Applications (IDNA): Definitions and Document Framework</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin'>
<organization /></author>
<date year='2010' month='August' />
<abstract>
<t>This document is one of a collection that, together, describe the protocol and usage context for a revision of Internationalized Domain Names for Applications (IDNA), superseding the earlier version.  It describes the document collection and provides definitions and other material that are common to the set. [STANDARDS-TRACK]</t></abstract></front>
<seriesInfo name='RFC' value='5890' />
<format type='TXT' octets='54245' target='http://www.rfc-editor.org/rfc/rfc5890.txt' />
</reference>

<reference anchor='RFC5891'>
<front>
<title>Internationalized Domain Names in Applications (IDNA): Protocol</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin'>
<organization /></author>
<date year='2010' month='August' />
<abstract>
<t>This document is the revised protocol definition for Internationalized Domain Names (IDNs).  The rationale for changes, the relationship to the older specification, and important terminology are provided in other documents.  This document specifies the protocol mechanism, called Internationalized Domain Names in Applications (IDNA), for registering and looking up IDNs in a way that does not require changes to the DNS itself.  IDNA is only meant for processing domain names, not free text. [STANDARDS-TRACK]</t></abstract></front>
<seriesInfo name='RFC' value='5891' />
<format type='TXT' octets='38105' target='http://www.rfc-editor.org/rfc/rfc5891.txt' />
</reference>

<reference anchor='RFC5892'>
<front>
<title>The Unicode Code Points and Internationalized Domain Names for Applications (IDNA)</title>
<author initials='P.' surname='Faltstrom' fullname='P. Faltstrom'>
<organization /></author>
<date year='2010' month='August' />
<abstract>
<t>This document specifies rules for deciding whether a code point, considered in isolation or in context, is a candidate for inclusion in an Internationalized Domain Name (IDN).&lt;/t>&lt;t> It is part of the specification of Internationalizing Domain Names in Applications 2008 (IDNA2008). [STANDARDS-TRACK]</t></abstract></front>
<seriesInfo name='RFC' value='5892' />
<format type='TXT' octets='187370' target='http://www.rfc-editor.org/rfc/rfc5892.txt' />
</reference>

<reference anchor='RFC5893'>
<front>
<title>Right-to-Left Scripts for Internationalized Domain Names for Applications (IDNA)</title>
<author initials='H.' surname='Alvestrand' fullname='H. Alvestrand'>
<organization /></author>
<author initials='C.' surname='Karp' fullname='C. Karp'>
<organization /></author>
<date year='2010' month='August' />
<abstract>
<t>The use of right-to-left scripts in Internationalized Domain Names (IDNs) has presented several challenges.  This memo provides a new Bidi rule for Internationalized Domain Names for Applications (IDNA) labels, based on the encountered problems with some scripts and some shortcomings in the 2003 IDNA Bidi criterion. [STANDARDS-TRACK]</t></abstract></front>
<seriesInfo name='RFC' value='5893' />
<format type='TXT' octets='38870' target='http://www.rfc-editor.org/rfc/rfc5893.txt' />
</reference>

<reference anchor='RFC5894'>
<front>
<title>Internationalized Domain Names for Applications (IDNA): Background, Explanation, and Rationale</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin'>
<organization /></author>
<date year='2010' month='August' />
<abstract>
<t>Several years have passed since the original protocol for Internationalized Domain Names (IDNs) was completed and deployed.  During that time, a number of issues have arisen, including the need to update the system to deal with newer versions of Unicode.  Some of these issues require tuning of the existing protocols and the tables on which they depend.  This document provides an overview of a revised system and provides explanatory material for its components.  This document is not an Internet Standards Track specification; it is published for informational purposes.</t></abstract></front>
<seriesInfo name='RFC' value='5894' />
<format type='TXT' octets='115174' target='http://www.rfc-editor.org/rfc/rfc5894.txt' />
</reference>

<reference anchor='RFC5895'>
<front>
<title>Mapping Characters for Internationalized Domain Names in Applications (IDNA) 2008</title>
<author initials='P.' surname='Resnick' fullname='P. Resnick'>
<organization /></author>
<author initials='P.' surname='Hoffman' fullname='P. Hoffman'>
<organization /></author>
<date year='2010' month='September' />
<abstract>
<t>In the original version of the Internationalized Domain Names in Applications (IDNA) protocol, any Unicode code points taken from user input were mapped into a set of Unicode code points that "made sense", and then encoded and passed to the domain name system (DNS).  The IDNA2008 protocol (described in RFCs 5890, 5891, 5892, and 5893) presumes that the input to the protocol comes from a set of "permitted" code points, which it then encodes and passes to the DNS, but does not specify what to do with the result of user input.  This document describes the actions that can be taken by an implementation between receiving user input and passing permitted code points to the new IDNA protocol.  This document is not an Internet Standards Track specification; it is published for informational purposes.</t></abstract></front>
<seriesInfo name='RFC' value='5895' />
<format type='TXT' octets='16556' target='http://www.rfc-editor.org/rfc/rfc5895.txt' />
</reference>

<reference anchor="UAX9" target='http://unicode.org/reports/tr9/'>
  <front>
    <title>Unicode Standard Annex #9: Unicode Bidirectional Algorithm</title>
    <author>
      <organization>The Unicode Consortium</organization>
    </author>
    <date month="September" year="2010" />
  </front>
</reference>

<reference anchor="UAX15" target='http://unicode.org/reports/tr15/'>
  <front>
    <title>Unicode Standard Annex #15: Unicode Normalization Forms</title>
    <author>
      <organization>The Unicode Consortium</organization>
    </author>
    <date month="September" year="2010" />
  </front>
</reference>

<reference anchor="UTR36" target='http://unicode.org/reports/tr36/'>
  <front>
    <title>Unicode Technical Report #36: Unicode Security Considerations</title>
    <author>
      <organization>The Unicode Consortium</organization>
    </author>
    <date month="August" year="2010" />
  </front>
</reference>

<reference anchor='XMPP-ADDR'>
<front>
<title>Extensible Messaging and Presence Protocol (XMPP): Address Format</title>
<author initials='P' surname='Saint-Andre' fullname='Peter Saint-Andre'>
    <organization />
</author>
<date month='July' day='11' year='2011' />
<abstract><t>This document defines the format for addresses used in the Extensible Messaging and Presence Protocol (XMPP), including support for Unicode characters outside the US-ASCII range.  This document obsoletes RFC 6122.</t>
</abstract>
</front>
<seriesInfo name='Internet-Draft' value='draft-saintandre-xmpp-6122bis-00' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-saintandre-xmpp-6122bis-00.txt' />
</reference>

    </references>
  </back>
</rfc>
